// Code generated by "ctenum create enum -package http -output http/httpmethod_ctenum.go httpmethod.yaml" version dev; DO NOT EDIT.

package http

import (
	"encoding"
	"errors"
	"fmt"
	"strconv"
	"strings"
)

// InvalidHTTPMethodEnumError is returned by [ToHTTPMethodEnum] if the passed in
// string isn't one of the enum values.
type InvalidHTTPMethodEnumError struct {
	s string
}

// Error exposes the invalid string used and shows all the possible values.
func (e InvalidHTTPMethodEnumError) Error() string {
	return strconv.Quote(e.s) + " does not belong to HTTPMethodEnum enum; " +
		"valid values are: " + strings.Join(HTTPMethodEnumStrings(), " ")
}

// Is tells you if target can be unwrapped to be an InvalidHTTPMethodEnumError.
func (e InvalidHTTPMethodEnumError) Is(err error) bool {
	return errors.As(err, &e)
}

// HTTPMethodEnum is a true enum, i.e. using this as a parameter in a function
// declaration requires the use of one of the constants defined in this package.
type HTTPMethodEnum interface {
	isHTTPMethodEnum()
	fmt.Stringer
	encoding.TextMarshaler
}

type _HTTPMethodEnum string

// isHTTPMethodEnum implements HTTPMethodEnum to make it a part of the compile-time
// safe enum.
func (_HTTPMethodEnum) isHTTPMethodEnum() {}

// String converts the private enum value to a primitive string.
func (x _HTTPMethodEnum) String() string {
	return string(x)
}

const (
	HTTPMethodEnumGET    _HTTPMethodEnum = "GET"
	HTTPMethodEnumPOST   _HTTPMethodEnum = "POST"
	HTTPMethodEnumPUT    _HTTPMethodEnum = "PUT"
	HTTPMethodEnumDELETE _HTTPMethodEnum = "DELETE"
)

var _HTTPMethodEnumMapping = map[string]_HTTPMethodEnum{
	"GET":    HTTPMethodEnumGET,
	"POST":   HTTPMethodEnumPOST,
	"PUT":    HTTPMethodEnumPUT,
	"DELETE": HTTPMethodEnumDELETE,
}

// ToHTTPMethodEnum retrieves an enum value from the constants defined in this
// package. It tries it's best to find s in the enum by using the original-case,
// uppercase and lowercase.
func ToHTTPMethodEnum(s string) (HTTPMethodEnum, error) {
	if val, ok := _HTTPMethodEnumMapping[s]; ok {
		return val, nil
	}
	if val, ok := _HTTPMethodEnumMapping[strings.ToLower(s)]; ok {
		return val, nil
	}
	if val, ok := _HTTPMethodEnumMapping[strings.ToUpper(s)]; ok {
		return val, nil
	}
	return nil, InvalidHTTPMethodEnumError{s: s}
}

// HTTPMethodEnumValues returns a slice of values of the HTTPMethodEnum enum.
// Each enum value matches the index of [HTTPMethodEnumStrings].
func HTTPMethodEnumValues() []HTTPMethodEnum {
	return []HTTPMethodEnum{
		HTTPMethodEnumGET,
		HTTPMethodEnumPOST,
		HTTPMethodEnumPUT,
		HTTPMethodEnumDELETE,
	}
}

// HTTPMethodEnumStrings returns a slice of all enum values as strings. This could
// be useful for validation with something like [slices.Contains] or quickly
// seeing all values of an enum.
// Each string matches the index of [HTTPMethodEnumValues].
func HTTPMethodEnumStrings() []string {
	return []string{
		"GET",
		"POST",
		"PUT",
		"DELETE",
	}
}

// MarshalText implements the [encoding.TextMarshaler] for HTTPMethodEnum.
func (x _HTTPMethodEnum) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

type HTTPMethodEnumUnmarshaler string

func (x HTTPMethodEnumUnmarshaler) Extract() HTTPMethodEnum {
	if x == "" {
		return nil
	}
	v, err := ToHTTPMethodEnum(string(x))
	if err != nil {
		panic(fmt.Sprintf("Incorrect usage of %T!"+
			"Used for unmarshalling into the application", x))
	}
	return v
}

func (x *HTTPMethodEnumUnmarshaler) UnmarshalText(text []byte) error {
	v, err := ToHTTPMethodEnum(string(text))
	if err != nil {
		return err
	}
	*x = HTTPMethodEnumUnmarshaler(any(v).(_HTTPMethodEnum))
	return nil
}
