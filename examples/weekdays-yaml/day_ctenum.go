// Code generated by "ctenum create enum day.yaml" version dev; DO NOT EDIT.

package main

import (
	"encoding"
	"errors"
	"fmt"
	"strconv"
	"strings"
)

// InvalidDayEnumError is returned by [ToDayEnum] if the passed in
// string isn't one of the enum values.
type InvalidDayEnumError struct {
	s string
}

// Error exposes the invalid string used and shows all the possible values.
func (e InvalidDayEnumError) Error() string {
	return strconv.Quote(e.s) + " does not belong to DayEnum enum; " +
		"valid values are: " + strings.Join(DayEnumStrings(), " ")
}

// Is tells you if target can be unwrapped to be an InvalidDayEnumError.
func (e InvalidDayEnumError) Is(err error) bool {
	return errors.As(err, &e)
}

// DayEnum is a true enum, i.e. using this as a parameter in a function
// declaration requires the use of one of the constants defined in this package.
type DayEnum interface {
	isDayEnum()
	fmt.Stringer
	encoding.TextMarshaler
}

type _DayEnum string

// isDayEnum implements DayEnum to make it a part of the compile-time
// safe enum.
func (_DayEnum) isDayEnum() {}

// String converts the private enum value to a primitive string.
func (x _DayEnum) String() string {
	return string(x)
}

const (
	DayEnumMonday    _DayEnum = "M"
	DayEnumTuesday   _DayEnum = "Tu"
	DayEnumWednesday _DayEnum = "W"
	DayEnumThursday  _DayEnum = "Th"
	DayEnumFriday    _DayEnum = "F"
)

var _DayEnumMapping = map[string]_DayEnum{
	"M":  DayEnumMonday,
	"Tu": DayEnumTuesday,
	"W":  DayEnumWednesday,
	"Th": DayEnumThursday,
	"F":  DayEnumFriday,
}

// ToDayEnum retrieves an enum value from the constants defined in this
// package. It tries it's best to find s in the enum by using the original-case,
// uppercase and lowercase.
func ToDayEnum(s string) (DayEnum, error) {
	if val, ok := _DayEnumMapping[s]; ok {
		return val, nil
	}
	if val, ok := _DayEnumMapping[strings.ToLower(s)]; ok {
		return val, nil
	}
	if val, ok := _DayEnumMapping[strings.ToUpper(s)]; ok {
		return val, nil
	}
	return nil, InvalidDayEnumError{s: s}
}

// DayEnumValues returns a slice of values of the DayEnum enum.
// Each enum value matches the index of [DayEnumStrings].
func DayEnumValues() []DayEnum {
	return []DayEnum{
		DayEnumMonday,
		DayEnumTuesday,
		DayEnumWednesday,
		DayEnumThursday,
		DayEnumFriday,
	}
}

// DayEnumStrings returns a slice of all enum values as strings. This could
// be useful for validation with something like [slices.Contains] or quickly
// seeing all values of an enum.
// Each string matches the index of [DayEnumValues].
func DayEnumStrings() []string {
	return []string{
		"M",
		"Tu",
		"W",
		"Th",
		"F",
	}
}

// MarshalText implements the [encoding.TextMarshaler] for DayEnum.
func (x _DayEnum) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

type DayEnumUnmarshaler string

func (x DayEnumUnmarshaler) Extract() DayEnum {
	if x == "" {
		return nil
	}
	v, err := ToDayEnum(string(x))
	if err != nil {
		panic(fmt.Sprintf("Incorrect usage of %T!"+
			"Used for unmarshalling into the application", x))
	}
	return v
}

func (x *DayEnumUnmarshaler) UnmarshalText(text []byte) error {
	v, err := ToDayEnum(string(text))
	if err != nil {
		return err
	}
	*x = DayEnumUnmarshaler(any(v).(_DayEnum))
	return nil
}
