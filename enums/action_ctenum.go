// Code generated by "ctenum create enum action.go" version dev; DO NOT EDIT.

package enums

import (
	"encoding"
	"errors"
	"fmt"
	"strconv"
	"strings"
)

// InvalidActionEnumError is returned by [ToActionEnum] if the passed in
// string isn't one of the enum values.
type InvalidActionEnumError struct {
	s string
}

// Error exposes the invalid string used and shows all the possible values.
func (e InvalidActionEnumError) Error() string {
	return strconv.Quote(e.s) + " does not belong to ActionEnum enum; " +
		"valid values are: " + strings.Join(ActionEnumStrings(), " ")
}

// Is tells you if target can be unwrapped to be an InvalidActionEnumError.
func (e InvalidActionEnumError) Is(err error) bool {
	return errors.As(err, &e)
}

// ActionEnum is a true enum, i.e. using this as a parameter in a function
// declaration requires the use of one of the constants defined in this package.
type ActionEnum interface {
	isActionEnum()
	fmt.Stringer
	encoding.TextMarshaler
}

type _ActionEnum string

// isActionEnum implements ActionEnum to make it a part of the compile-time
// safe enum.
func (_ActionEnum) isActionEnum() {}

// String converts the private enum value to a primitive string.
func (x _ActionEnum) String() string {
	return string(x)
}

const (
	ActionEnumCreate _ActionEnum = "create"
	ActionEnumVersion _ActionEnum = "version"
	ActionEnumHelp _ActionEnum = "help"
)

var _ActionEnumMapping = map[string]_ActionEnum{
	"create":  ActionEnumCreate,
	"version": ActionEnumVersion,
	"help":    ActionEnumHelp,
}

// ToActionEnum retrieves an enum value from the constants defined in this
// package. It tries it's best to find s in the enum by using the original-case,
// uppercase and lowercase.
func ToActionEnum(s string) (ActionEnum, error) {
	if val, ok := _ActionEnumMapping[s]; ok {
		return val, nil
	}
	if val, ok := _ActionEnumMapping[strings.ToLower(s)]; ok {
		return val, nil
	}
	if val, ok := _ActionEnumMapping[strings.ToUpper(s)]; ok {
		return val, nil
	}
	return nil, InvalidActionEnumError{s: s}
}

// ActionEnumValues returns a slice of values of the ActionEnum enum.
// Each enum value matches the index of [ActionEnumStrings].
func ActionEnumValues() []ActionEnum {
	return []ActionEnum{
		ActionEnumCreate,
		ActionEnumVersion,
		ActionEnumHelp,
	}
}

// ActionEnumStrings returns a slice of all enum values as strings. This could
// be useful for validation with something like [slices.Contains] or quickly
// seeing all values of an enum.
// Each string matches the index of [ActionEnumValues].
func ActionEnumStrings() []string {
	return []string{
		"create",
		"version",
		"help",
	}
}

// MarshalText implements the [encoding.TextMarshaler] for ActionEnum.
func (x _ActionEnum) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}
